use_package_doc()
use_rcpp("proj-version")
devtools::load_all(".")
devtools::load_all(".")
geoproj_cpp_func()
use_data_raw("update-proj")
library(tidyverse)
curl::curl_download(source_url, "data-raw/proj-source.tar.gz")
source_url <- "https://download.osgeo.org/proj/proj-7.0.0.tar.gz"
curl::curl_download(source_url, "data-raw/proj-source.tar.gz")
untar("data-raw/proj-source.tar.gz", exdir = "data-raw/proj-source")
untar("data-raw/proj-source.tar.gz", exdir = "data-raw")
list.files("data-raw", "^proj-[0-9.]+", include.dirs = TRUE, full.names = TRUE)
stopifnot(dir.exists(proj_dir), length(proj_dir) == 1)
proj_dir <- list.files("data-raw", "^proj-[0-9.]+", include.dirs = TRUE, full.names = TRUE)
stopifnot(dir.exists(proj_dir), length(proj_dir) == 1)
source_files <- tibble(
path = list.files(proj_dir, "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)
)
View(source_files)
source_files <- tibble(
path = list.files(proj_dir, "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)
) %>%
filter(!str_detect("/(apps|tests)/"))
source_files <- tibble(
path = list.files(proj_dir, "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)
) %>%
filter(!str_detect(path, "/(apps|tests)/"))
View(source_files)
source_files <- tibble(
path = list.files(proj_dir, "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)
) %>%
filter(!str_detect(path, "/(apps|test)/"))
View(source_files)
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)
) %>%
filter(!str_detect(path, "/(apps|test)/"))
View(source_files)
View(source_files)
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/")
) %>%
filter(!str_detect(path, "/(apps|test)/"))
View(source_files)
source_files %>%
pull(final_path)
source_files %>%
pull(final_path) %>%
dirname()
source_files %>%
pull(final_path) %>%
dirname() %>%
unique()
dest_dirs <- source_files %>%
pull(final_path) %>%
dirname() %>%
unique()
dir.create(dest_dirs[!dir.exists(dest_dirs)])
dest_dirs <- source_files %>%
pull(final_path) %>%
dirname() %>%
unique()
dest_dirs[!dir.exists(dest_dirs)]
dir.create(dest_dirs[!dir.exists(dest_dirs)])
dest_dirs[!dir.exists(dest_dirs)]
dest_dirs[!dir.exists(dest_dirs)] %>% walk(dir.create)
file.copy(source_files$path, source_files$final_path)
# clean source dir
current_source_files <- tibble(path = list.files("src", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/geoproj-"))
View(current_source_files)
# clean source dir
current_source_files <- tibble(path = list.files("src", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp)"))
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp)"))
unlink(current_source_files$path)
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp)"))
list.dirs("src")
unlink(list.dirs("src")[!str_detect("^src$")])
unlink(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")])
list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]
file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")])
proj_dir <- list.files("data-raw", "^proj-[0-9.]+", include.dirs = TRUE, full.names = TRUE)
library(tidyverse)
stopifnot(dir.exists(proj_dir), length(proj_dir) == 1)
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/")
) %>%
filter(!str_detect(path, "/(apps|test)/"))
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp)"))
unlink(current_source_files$path)
stopifnot(file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]))
file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]
# create destination dirs
dest_dirs <- source_files %>%
pull(final_path) %>%
dirname() %>%
unique()
dest_dirs[!dir.exists(dest_dirs)] %>% walk(dir.create)
# copy source files
stopifnot(file.copy(source_files$path, source_files$final_path))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
includes <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/")
)
View(includes)
includes <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?include/", "src/")
)
View(includes)
headers <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?include/", "src/")
)
library(tidyverse)
proj_dir <- list.files("data-raw", "^proj-[0-9.]+", include.dirs = TRUE, full.names = TRUE)
stopifnot(dir.exists(proj_dir), length(proj_dir) == 1)
headers <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?include/", "src/")
)
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/")
) %>%
filter(!str_detect(path, "/(apps|test)/"))
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp|Makevars|proj_config)"))
View(current_source_files)
unlink(current_source_files$path)
unlink("src/proj/", recursive = TRUE)
stopifnot(file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]))
# create destination dirs
dest_dirs <- c(
headers %>% pull(final_path),
source_files %>% pull(final_path)
) %>%
dirname() %>%
unique()
dest_dirs
dest_dirs[!dir.exists(dest_dirs)] %>% walk(dir.create)
# copy source files
stopifnot(
file.copy(headers$path, headers$final_path),
file.copy(source_files$path, source_files$final_path)
)
devtools::load_all(".")
# headers can be in subdirectories no problem
# it might make more sense to have these in inst/include,
# but I can't get that to work...so they are in src/, with
# the CXXFLAGS=-I../src
headers <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?include/", "src/")
)
library(tidyverse)
# make sure the dir exists
proj_dir <- list.files("data-raw", "^proj-[0-9.]+", include.dirs = TRUE, full.names = TRUE)
stopifnot(dir.exists(proj_dir), length(proj_dir) == 1)
# headers can be in subdirectories no problem
# it might make more sense to have these in inst/include,
# but I can't get that to work...so they are in src/, with
# the CXXFLAGS=-I../src
headers <- tibble(
path = list.files(file.path(proj_dir, "include"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?include/", "src/")
)
# R doesn't do recursive folders easily
# so instead we replace "/" with "__"
# there aren't any headers in subdirs, so we don't need to
# search + replace in any source files
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/")
) %>%
filter(!str_detect(path, "/(apps|test)/"))
# R doesn't do recursive folders easily
# so instead we replace "/" with "__"
# there aren't any headers in subdirs, so we don't need to
# search + replace in any source files
source_files <- tibble(
path = list.files(file.path(proj_dir, "src"), "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE),
final_path = str_replace(path, ".*?src/", "src/") %>%
str_replace_all("/", "__") %>%
str_replace("src__", "src/")
) %>%
filter(!str_detect(path, "/(apps|test)/"))
View(source_files)
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp|Makevars|proj_config)"))
View(current_source_files)
unlink(current_source_files$path)
unlink("src/proj/", recursive = TRUE)
stopifnot(file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]))
# clean source dir
current_source_files <- tibble(path = list.files("src", "\\.(h|hpp|cpp|o)$", full.names = TRUE, recursive = TRUE)) %>%
filter(!str_detect(path, "^src/(geoproj-|Rcpp|Makevars|proj_config)"))
unlink(current_source_files$path)
unlink("src/proj/", recursive = TRUE)
stopifnot(file.remove(list.dirs("src")[!str_detect(list.dirs("src"), "^src$")]))
# create destination dirs
dest_dirs <- c(
headers %>% pull(final_path),
source_files %>% pull(final_path)
) %>%
dirname() %>%
unique()
dest_dirs[!dir.exists(dest_dirs)] %>% walk(dir.create)
# copy source files
stopifnot(
file.copy(headers$path, headers$final_path),
file.copy(source_files$path, source_files$final_path)
)
devtools::load_all(".")
devtools::load_all(".")
geoproj_cpp_proj_version()
devtools::load_all(".")
geoproj_cpp_proj_version()
devtools::load_all(".")
devtools::load_all(".")
geoproj_cpp_proj_version()
use_r("proj-version")
devtools::load_all(".")
use_roxygen_md()
library(geoproj)
?proj_version
proj_version()
use_github()
use_readme_rmd()
proj_version()
library(geoproj)
proj_version()
use_lifecycle_badge("experimental")
use_package_doc()
